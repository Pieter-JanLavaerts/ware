> spread 4 f
=> [4,4,4,4,4,4] + [0,0,1,1,1,1]
[4,4,5,5,5,5]

==> The first Rebirth

Testing on my physical board lol ...

> initSide @@ 0
=> [4,4,4,4,4,4] @@ 0
=> [4,4,4,4,4,4] !! boardWidth - 1 - 0
=> [4,4,4,4,4,4] !! 5

==> I think everything could be done with spreading one direction only 
==> and flipping the board

> moveFront 4 initBoard
= moveFront b initBoard
= moveFrontWHand 4 0 initBoard
= moveFrontWHand 4 (boardWidth - n) (moveFrontBase i b)
= moveFrontWHand 4 (6 - 0) (6 4 initBoard)

setPit 5 9 initBoard
setPit i v initBoard
[f !! 4, b]
=[[4,4,4,4,9,4],[4,4,4,4,4,4]]

# Attempt 1
moveFront 4 initBoard
= flipBoard (spreadFront 2 b) (Side [5,5,0,4,4,4])
= flipBoard (spreadFront 2 b) (Side [5,5,0,4,4,4])
= flipBoard (Side [5,5,4,4,4,4]) (Side [5,5,0,4,4,4])
Board (Side [4,4,4,0,5,5]) (Side [4,4,4,4,5,5])

# Attempt 2
moveFront 4 initBoard
= moveFrontWHand 4 0 initBoard
= otherwise
= moveFrontWHand (i `rem` boardWidth) (boardWidth - n) $ flipBoard (moveFrontBase i b)
= moveFrontWHand ((boardWidth - 4) `rem` boardWidth) (boardWidth - n) $ flipBoard (moveFrontBase i b)

https://hackage.haskell.org/package/data-clist-0.2/docs/Data-CircularList.html

